import streamlit as st
import tempfile
import os
import subprocess
from validacao_parametros import extrair_parametros_do_pdf, extrair_valores_do_pdf, validar_valores, gerar_relatorio

# ========================================
# CONFIGURA√á√ÉO INICIAL E LOGIN
# ========================================
usuarios_autorizados = {
    "yan": "1234",
    "cliente1": "senha123",
    "Dolorice20": "Rebeca10"
}

if "autenticado" not in st.session_state:
    st.session_state.autenticado = False

if not st.session_state.autenticado:
    st.set_page_config(page_title="Login - MTC Insight", layout="centered")
    st.title("üîê √Årea de Login")
    usuario = st.text_input("Usu√°rio")
    senha = st.text_input("Senha", type="password")
    
    if st.button("Entrar"):
        if usuarios_autorizados.get(usuario) == senha:
            st.session_state.autenticado = True
            st.experimental_rerun()
        else:
            st.error("‚ùå Usu√°rio ou senha inv√°lidos.")
    st.stop()

# ========================================
# INTERFACE PRINCIPAL
# ========================================
st.set_page_config(page_title="MTC Insight", layout="centered", page_icon="üåø")
st.sidebar.success("üîì Autenticado")
if st.sidebar.button("Sair"):
    st.session_state.autenticado = False
    st.experimental_rerun()

st.title("üåø MTC Insight Pro")
st.caption("Sistema avan√ßado de an√°lise de relat√≥rios de sa√∫de")

# Se√ß√£o de informa√ß√µes do terapeuta
st.subheader("üßë‚Äç‚öïÔ∏è Informa√ß√µes do Terapeuta")
with st.expander("Preencha seus dados profissionais", expanded=True):
    nome_terapeuta = st.text_input("Nome completo do terapeuta")
    registro_terapeuta = st.text_input("CRF / CRTH / Registro profissional")

# Se√ß√£o de upload do arquivo
st.subheader("üìé Upload do Relat√≥rio")
arquivo = st.file_uploader(
    "Selecione o arquivo do relat√≥rio (PDF ou DOCX)",
    type=["pdf", "docx"],
    help="Arquivos DOCX ser√£o convertidos para PDF automaticamente"
)

# Se√ß√£o de visualiza√ß√£o de par√¢metros
if arquivo and st.button("üîç Visualizar Par√¢metros"):
    with st.spinner("Analisando estrutura do arquivo..."):
        try:
            # Processamento tempor√°rio do arquivo
            ext = os.path.splitext(arquivo.name)[1].lower()
            tmp_input = tempfile.NamedTemporaryFile(delete=False, suffix=ext)
            tmp_input.write(arquivo.read())
            tmp_input.close()

            # Convers√£o para PDF se necess√°rio
            if ext == ".docx":
                tmp_pdf = tmp_input.name.replace(".docx", ".pdf")
                subprocess.run([
                    "libreoffice", "--headless", "--convert-to", "pdf", tmp_input.name,
                    "--outdir", os.path.dirname(tmp_input.name)
                ], check=True)
                pdf_path = tmp_pdf
            else:
                pdf_path = tmp_input.name

            # Extrai par√¢metros para visualiza√ß√£o
            parametros = extrair_parametros_do_pdf(pdf_path)
            
            if parametros:
                st.success(f"‚úÖ {len(parametros)} par√¢metros identificados no relat√≥rio")
                st.dataframe(
                    data=[{"Par√¢metro": k, "M√≠nimo": v[0], "M√°ximo": v[1]} for k, v in parametros.items()],
                    height=300,
                    use_container_width=True
                )
            else:
                st.warning("‚ö†Ô∏è N√£o foram encontrados par√¢metros no formato esperado")

            # Limpeza
            os.unlink(tmp_input.name)
            if ext == ".docx" and os.path.exists(pdf_path):
                os.unlink(pdf_path)

        except Exception as e:
            st.error(f"Erro ao analisar arquivo: {str(e)}")

# Se√ß√£o de valida√ß√£o principal
if st.button("‚öôÔ∏è Validar Par√¢metros", type="primary"):
    if not nome_terapeuta or not registro_terapeuta:
        st.warning("‚ö†Ô∏è Preencha os dados do terapeuta antes de validar.")
    elif not arquivo:
        st.warning("‚ö†Ô∏è Nenhum arquivo foi carregado.")
    else:
        with st.spinner("Processando relat√≥rio..."):
            try:
                # 1) Salva upload em arquivo tempor√°rio
                ext = os.path.splitext(arquivo.name)[1].lower()
                tmp_input = tempfile.NamedTemporaryFile(delete=False, suffix=ext)
                tmp_input.write(arquivo.read())
                tmp_input.close()

                # 2) Convers√£o para PDF se necess√°rio
                if ext == ".docx":
                    tmp_pdf = tmp_input.name.replace(".docx", ".pdf")
                    subprocess.run([
                        "libreoffice", "--headless", "--convert-to", "pdf", tmp_input.name,
                        "--outdir", os.path.dirname(tmp_input.name)
                    ], check=True)
                    pdf_path = tmp_pdf
                else:
                    pdf_path = tmp_input.name

                # 3) Processamento completo
                parametros = extrair_parametros_do_pdf(pdf_path)
                valores = extrair_valores_do_pdf(pdf_path)
                
                if not parametros or not valores:
                    st.error("‚ùå N√£o foi poss√≠vel extrair dados do relat√≥rio. Verifique o formato.")
                    st.stop()
                
                # 4) Valida√ß√£o e exibi√ß√£o de resultados
                anomalias = validar_valores(parametros, valores)
                
                # Resultado da an√°lise
                st.subheader("üìä Resultados da An√°lise")
                st.metric("Total de Par√¢metros Analisados", len(parametros))
                
                if not anomalias:
                    st.success("üéâ Todos os par√¢metros est√£o dentro dos intervalos normais!")
                else:
                    st.error(f"‚ö†Ô∏è {len(anomalias)} par√¢metros fora do intervalo normal")
                    
                    # Tabela de anomalias
                    st.dataframe(
                        data=[{
                            "Par√¢metro": a['item'],
                            "Valor": f"{a['valor_real']:.3f}",
                            "Status": a['status'],
                            "Intervalo Normal": f"{a['normal_min']} - {a['normal_max']}"
                        } for a in anomalias],
                        height=min(400, len(anomalias)*35),
                        use_container_width=True
                    )

                    # 5) Gera√ß√£o do relat√≥rio DOCX
                    output_path = os.path.join(tempfile.gettempdir(), "relatorio_anomalias.docx")
                    sucesso, _ = gerar_relatorio(pdf_path, nome_terapeuta, registro_terapeuta, output_path)
                    
                    if sucesso:
                        with open(output_path, "rb") as f:
                            st.download_button(
                                "‚¨áÔ∏è Baixar Relat√≥rio Completo (.docx)",
                                data=f.read(),
                                file_name=f"Relatorio_Anomalias_{nome_terapeuta.split()[0]}.docx",
                                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                                help="Relat√≥rio detalhado com todas as anomalias encontradas"
                            )
                    else:
                        st.warning("N√£o foi poss√≠vel gerar o relat√≥rio completo em DOCX.")

            except subprocess.CalledProcessError:
                st.error("‚ùå Erro na convers√£o do documento. Verifique se o LibreOffice est√° instalado.")
            except Exception as e:
                st.error(f"‚ùå Erro inesperado: {str(e)}")
            finally:
                # Limpeza dos arquivos tempor√°rios
                if os.path.exists(tmp_input.name):
                    os.unlink(tmp_input.name)
                if ext == ".docx" and os.path.exists(pdf_path):
                    os.unlink(pdf_path)
                if os.path.exists(output_path):
                    os.unlink(output_path)

# Rodap√©
st.markdown("---")
st.caption("MTC Insight Pro v2.0 - Sistema de an√°lise de relat√≥rios de sa√∫de")